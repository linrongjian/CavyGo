// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: business.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 模块类型
type ModuleType int32

const (
	// DDD  0-99
	ModuleType_MTTest      ModuleType = 0  //测试
	ModuleType_MTAuth      ModuleType = 1  //验证
	ModuleType_MTPush      ModuleType = 2  //推送
	ModuleType_MTHero      ModuleType = 3  //英雄
	ModuleType_MTBattle    ModuleType = 4  //战役
	ModuleType_MTFriend    ModuleType = 5  //好友
	ModuleType_MTRank      ModuleType = 6  //排行
	ModuleType_MTWareHouse ModuleType = 7  //仓库守卫
	ModuleType_MTShop      ModuleType = 8  //商城
	ModuleType_MTChat      ModuleType = 9  //聊天
	ModuleType_MTLottery   ModuleType = 10 //抽奖
	ModuleType_MTShare     ModuleType = 11 //分享
	ModuleType_MTGuide     ModuleType = 12 //新手引导
	ModuleType_MTTask      ModuleType = 13 //任务
	// GODDESS 100-200
	ModuleType_MTGAuth     ModuleType = 100 //登录
	ModuleType_MTGUpload   ModuleType = 101 //上传存档
	ModuleType_MTGMail     ModuleType = 102 //邮件
	ModuleType_MTGSignIn   ModuleType = 103 //签到
	ModuleType_MTGShare    ModuleType = 104 //分享
	ModuleType_MTGFreeca   ModuleType = 105 //福利卡
	ModuleType_MTGFuben    ModuleType = 106 //副本
	ModuleType_MTGArean    ModuleType = 107 //竞技场
	ModuleType_MTGLottery  ModuleType = 108 //抽奖
	ModuleType_MTGActivity ModuleType = 109 //活动
	ModuleType_MTGOffline  ModuleType = 110 //离线时间
	ModuleType_MTGVip      ModuleType = 111 //vip
	ModuleType_MTGRecharge ModuleType = 112 //首充
)

// Enum value maps for ModuleType.
var (
	ModuleType_name = map[int32]string{
		0:   "MTTest",
		1:   "MTAuth",
		2:   "MTPush",
		3:   "MTHero",
		4:   "MTBattle",
		5:   "MTFriend",
		6:   "MTRank",
		7:   "MTWareHouse",
		8:   "MTShop",
		9:   "MTChat",
		10:  "MTLottery",
		11:  "MTShare",
		12:  "MTGuide",
		13:  "MTTask",
		100: "MTGAuth",
		101: "MTGUpload",
		102: "MTGMail",
		103: "MTGSignIn",
		104: "MTGShare",
		105: "MTGFreeca",
		106: "MTGFuben",
		107: "MTGArean",
		108: "MTGLottery",
		109: "MTGActivity",
		110: "MTGOffline",
		111: "MTGVip",
		112: "MTGRecharge",
	}
	ModuleType_value = map[string]int32{
		"MTTest":      0,
		"MTAuth":      1,
		"MTPush":      2,
		"MTHero":      3,
		"MTBattle":    4,
		"MTFriend":    5,
		"MTRank":      6,
		"MTWareHouse": 7,
		"MTShop":      8,
		"MTChat":      9,
		"MTLottery":   10,
		"MTShare":     11,
		"MTGuide":     12,
		"MTTask":      13,
		"MTGAuth":     100,
		"MTGUpload":   101,
		"MTGMail":     102,
		"MTGSignIn":   103,
		"MTGShare":    104,
		"MTGFreeca":   105,
		"MTGFuben":    106,
		"MTGArean":    107,
		"MTGLottery":  108,
		"MTGActivity": 109,
		"MTGOffline":  110,
		"MTGVip":      111,
		"MTGRecharge": 112,
	}
)

func (x ModuleType) Enum() *ModuleType {
	p := new(ModuleType)
	*p = x
	return p
}

func (x ModuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_business_proto_enumTypes[0].Descriptor()
}

func (ModuleType) Type() protoreflect.EnumType {
	return &file_business_proto_enumTypes[0]
}

func (x ModuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ModuleType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ModuleType(num)
	return nil
}

// Deprecated: Use ModuleType.Descriptor instead.
func (ModuleType) EnumDescriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{0}
}

// 战斗结果类型
type BattleResultType int32

const (
	BattleResultType_BRTWin  BattleResultType = 1 //胜利
	BattleResultType_BRTFail BattleResultType = 2 //失败
)

// Enum value maps for BattleResultType.
var (
	BattleResultType_name = map[int32]string{
		1: "BRTWin",
		2: "BRTFail",
	}
	BattleResultType_value = map[string]int32{
		"BRTWin":  1,
		"BRTFail": 2,
	}
)

func (x BattleResultType) Enum() *BattleResultType {
	p := new(BattleResultType)
	*p = x
	return p
}

func (x BattleResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattleResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_business_proto_enumTypes[1].Descriptor()
}

func (BattleResultType) Type() protoreflect.EnumType {
	return &file_business_proto_enumTypes[1]
}

func (x BattleResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BattleResultType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BattleResultType(num)
	return nil
}

// Deprecated: Use BattleResultType.Descriptor instead.
func (BattleResultType) EnumDescriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{1}
}

// 道具信息
type Prop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`        //道具id
	Count *int32  `protobuf:"varint,2,req,name=count" json:"count,omitempty"` //道具数量
}

func (x *Prop) Reset() {
	*x = Prop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_business_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prop) ProtoMessage() {}

func (x *Prop) ProtoReflect() protoreflect.Message {
	mi := &file_business_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prop.ProtoReflect.Descriptor instead.
func (*Prop) Descriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{0}
}

func (x *Prop) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Prop) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// 英雄
type Hero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`                       //英雄ID
	Level         *int32  `protobuf:"varint,2,req,name=level" json:"level,omitempty"`                //等级
	Quality       *int32  `protobuf:"varint,3,req,name=quality" json:"quality,omitempty"`            //品级
	Star          *int32  `protobuf:"varint,4,req,name=star" json:"star,omitempty"`                  //星阶
	SkillLevel    *int32  `protobuf:"varint,5,req,name=skillLevel" json:"skillLevel,omitempty"`      //技能ID（升级后ID不同）
	HelmetId      *string `protobuf:"bytes,6,req,name=helmetId" json:"helmetId,omitempty"`           //头盔道具id
	BreastplateId *string `protobuf:"bytes,7,req,name=breastplateId" json:"breastplateId,omitempty"` //胸甲道具id
	ShoesId       *string `protobuf:"bytes,8,req,name=shoesId" json:"shoesId,omitempty"`             //鞋子道具id
	WeaponId      *string `protobuf:"bytes,9,req,name=weaponId" json:"weaponId,omitempty"`           //武器道具id
	FightScore    *int32  `protobuf:"varint,10,req,name=fightScore" json:"fightScore,omitempty"`     //战斗力
}

func (x *Hero) Reset() {
	*x = Hero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_business_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hero) ProtoMessage() {}

func (x *Hero) ProtoReflect() protoreflect.Message {
	mi := &file_business_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hero.ProtoReflect.Descriptor instead.
func (*Hero) Descriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{1}
}

func (x *Hero) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Hero) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *Hero) GetQuality() int32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *Hero) GetStar() int32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *Hero) GetSkillLevel() int32 {
	if x != nil && x.SkillLevel != nil {
		return *x.SkillLevel
	}
	return 0
}

func (x *Hero) GetHelmetId() string {
	if x != nil && x.HelmetId != nil {
		return *x.HelmetId
	}
	return ""
}

func (x *Hero) GetBreastplateId() string {
	if x != nil && x.BreastplateId != nil {
		return *x.BreastplateId
	}
	return ""
}

func (x *Hero) GetShoesId() string {
	if x != nil && x.ShoesId != nil {
		return *x.ShoesId
	}
	return ""
}

func (x *Hero) GetWeaponId() string {
	if x != nil && x.WeaponId != nil {
		return *x.WeaponId
	}
	return ""
}

func (x *Hero) GetFightScore() int32 {
	if x != nil && x.FightScore != nil {
		return *x.FightScore
	}
	return 0
}

// 登录返回
type LoginRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       *int64   `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`            //用户ID
	Nick           *string  `protobuf:"bytes,2,req,name=nick" json:"nick,omitempty"`                     //用户昵称
	Portrait       *string  `protobuf:"bytes,3,req,name=portrait" json:"portrait,omitempty"`             //头像
	Level          *int32   `protobuf:"varint,4,req,name=level" json:"level,omitempty"`                  //等级
	Experience     *int32   `protobuf:"varint,5,req,name=experience" json:"experience,omitempty"`        //经验
	Props          []*Prop  `protobuf:"bytes,7,rep,name=props" json:"props,omitempty"`                   //道具列表
	CurCustomsPass *string  `protobuf:"bytes,8,req,name=curCustomsPass" json:"curCustomsPass,omitempty"` //关卡, 为0时表示新手
	Heros          []*Hero  `protobuf:"bytes,9,rep,name=heros" json:"heros,omitempty"`                   //英雄列表
	BattleArray    []string `protobuf:"bytes,10,rep,name=battleArray" json:"battleArray,omitempty"`      //战役阵容
	Reddot         []string `protobuf:"bytes,11,rep,name=reddot" json:"reddot,omitempty"`                //红点标识tag 以字符串标识与推送的红点tag一致
	CurGuide       *string  `protobuf:"bytes,12,req,name=CurGuide" json:"CurGuide,omitempty"`            //当前引导Id
	HistoryGuide   []string `protobuf:"bytes,13,rep,name=HistoryGuide" json:"HistoryGuide,omitempty"`    //历史引导
}

func (x *LoginRsp) Reset() {
	*x = LoginRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_business_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRsp) ProtoMessage() {}

func (x *LoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_business_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRsp.ProtoReflect.Descriptor instead.
func (*LoginRsp) Descriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{2}
}

func (x *LoginRsp) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *LoginRsp) GetNick() string {
	if x != nil && x.Nick != nil {
		return *x.Nick
	}
	return ""
}

func (x *LoginRsp) GetPortrait() string {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return ""
}

func (x *LoginRsp) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *LoginRsp) GetExperience() int32 {
	if x != nil && x.Experience != nil {
		return *x.Experience
	}
	return 0
}

func (x *LoginRsp) GetProps() []*Prop {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *LoginRsp) GetCurCustomsPass() string {
	if x != nil && x.CurCustomsPass != nil {
		return *x.CurCustomsPass
	}
	return ""
}

func (x *LoginRsp) GetHeros() []*Hero {
	if x != nil {
		return x.Heros
	}
	return nil
}

func (x *LoginRsp) GetBattleArray() []string {
	if x != nil {
		return x.BattleArray
	}
	return nil
}

func (x *LoginRsp) GetReddot() []string {
	if x != nil {
		return x.Reddot
	}
	return nil
}

func (x *LoginRsp) GetCurGuide() string {
	if x != nil && x.CurGuide != nil {
		return *x.CurGuide
	}
	return ""
}

func (x *LoginRsp) GetHistoryGuide() []string {
	if x != nil {
		return x.HistoryGuide
	}
	return nil
}

// 路由信息
type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *ModuleType `protobuf:"varint,1,req,name=type,enum=ModuleType" json:"type,omitempty"` //模块名称
	Path *string     `protobuf:"bytes,2,req,name=path" json:"path,omitempty"`                  //模块对应的路径名称
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_business_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_business_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{3}
}

func (x *Route) GetType() ModuleType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ModuleType_MTTest
}

func (x *Route) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

// 策略
type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrs   []string `protobuf:"bytes,1,rep,name=addrs" json:"addrs,omitempty"`     //服务器地址列表  ip:port
	Routes  []*Route `protobuf:"bytes,2,rep,name=routes" json:"routes,omitempty"`   //路由信息
	SignKey *string  `protobuf:"bytes,3,req,name=signKey" json:"signKey,omitempty"` //签名key
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_business_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_business_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{4}
}

func (x *Schedule) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *Schedule) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Schedule) GetSignKey() string {
	if x != nil && x.SignKey != nil {
		return *x.SignKey
	}
	return ""
}

// 战斗结果
type BattleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *BattleResultType `protobuf:"varint,1,req,name=result,enum=BattleResultType" json:"result,omitempty"` //结果
}

func (x *BattleResult) Reset() {
	*x = BattleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_business_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleResult) ProtoMessage() {}

func (x *BattleResult) ProtoReflect() protoreflect.Message {
	mi := &file_business_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleResult.ProtoReflect.Descriptor instead.
func (*BattleResult) Descriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{5}
}

func (x *BattleResult) GetResult() BattleResultType {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return BattleResultType_BRTWin
}

// 上报战役进度
type UploadBattleProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurStageId   *string       `protobuf:"bytes,1,opt,name=curStageId" json:"curStageId,omitempty"`     // 当前关卡id
	BattleResult *BattleResult `protobuf:"bytes,2,opt,name=battleResult" json:"battleResult,omitempty"` // 用于校验战斗
}

func (x *UploadBattleProgress) Reset() {
	*x = UploadBattleProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_business_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBattleProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBattleProgress) ProtoMessage() {}

func (x *UploadBattleProgress) ProtoReflect() protoreflect.Message {
	mi := &file_business_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBattleProgress.ProtoReflect.Descriptor instead.
func (*UploadBattleProgress) Descriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{6}
}

func (x *UploadBattleProgress) GetCurStageId() string {
	if x != nil && x.CurStageId != nil {
		return *x.CurStageId
	}
	return ""
}

func (x *UploadBattleProgress) GetBattleResult() *BattleResult {
	if x != nil {
		return x.BattleResult
	}
	return nil
}

// 战役信息
type BattleInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurStageId       *string `protobuf:"bytes,1,opt,name=curStageId" json:"curStageId,omitempty"`              // 当前关卡id
	NextRecvWaittime *int32  `protobuf:"varint,2,opt,name=nextRecvWaittime" json:"nextRecvWaittime,omitempty"` // 下次领取剩余等待时间(单位s)
	Money            *int32  `protobuf:"varint,3,opt,name=money" json:"money,omitempty"`                       // 挂机金币
	Experience       *int32  `protobuf:"varint,4,opt,name=experience" json:"experience,omitempty"`             // 挂机经验
	Prop             []*Prop `protobuf:"bytes,5,rep,name=prop" json:"prop,omitempty"`                          // 挂机道具
	Maxmoney         *int32  `protobuf:"varint,6,opt,name=maxmoney" json:"maxmoney,omitempty"`                 // 挂机金币最大值
	Maxexperience    *int32  `protobuf:"varint,7,opt,name=maxexperience" json:"maxexperience,omitempty"`       // 挂机经验最大值
}

func (x *BattleInterface) Reset() {
	*x = BattleInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_business_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleInterface) ProtoMessage() {}

func (x *BattleInterface) ProtoReflect() protoreflect.Message {
	mi := &file_business_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleInterface.ProtoReflect.Descriptor instead.
func (*BattleInterface) Descriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{7}
}

func (x *BattleInterface) GetCurStageId() string {
	if x != nil && x.CurStageId != nil {
		return *x.CurStageId
	}
	return ""
}

func (x *BattleInterface) GetNextRecvWaittime() int32 {
	if x != nil && x.NextRecvWaittime != nil {
		return *x.NextRecvWaittime
	}
	return 0
}

func (x *BattleInterface) GetMoney() int32 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *BattleInterface) GetExperience() int32 {
	if x != nil && x.Experience != nil {
		return *x.Experience
	}
	return 0
}

func (x *BattleInterface) GetProp() []*Prop {
	if x != nil {
		return x.Prop
	}
	return nil
}

func (x *BattleInterface) GetMaxmoney() int32 {
	if x != nil && x.Maxmoney != nil {
		return *x.Maxmoney
	}
	return 0
}

func (x *BattleInterface) GetMaxexperience() int32 {
	if x != nil && x.Maxexperience != nil {
		return *x.Maxexperience
	}
	return 0
}

// 怪物掉落配置
type MonsterDrop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterId *string `protobuf:"bytes,1,opt,name=monsterId" json:"monsterId,omitempty"` // 怪物id
	Prop      []*Prop `protobuf:"bytes,2,rep,name=prop" json:"prop,omitempty"`           // 掉落道具
}

func (x *MonsterDrop) Reset() {
	*x = MonsterDrop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_business_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonsterDrop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterDrop) ProtoMessage() {}

func (x *MonsterDrop) ProtoReflect() protoreflect.Message {
	mi := &file_business_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterDrop.ProtoReflect.Descriptor instead.
func (*MonsterDrop) Descriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{8}
}

func (x *MonsterDrop) GetMonsterId() string {
	if x != nil && x.MonsterId != nil {
		return *x.MonsterId
	}
	return ""
}

func (x *MonsterDrop) GetProp() []*Prop {
	if x != nil {
		return x.Prop
	}
	return nil
}

// 关卡掉落
type StageDrop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId           *string        `protobuf:"bytes,1,opt,name=stageId" json:"stageId,omitempty"`                      // 关卡id
	StageMoney        *int32         `protobuf:"varint,2,opt,name=stageMoney" json:"stageMoney,omitempty"`               // 关卡通关金币
	StageExperience   *int32         `protobuf:"varint,3,opt,name=stageExperience" json:"stageExperience,omitempty"`     // 关卡通关经验
	Monsterdrop       []*MonsterDrop `protobuf:"bytes,4,rep,name=monsterdrop" json:"monsterdrop,omitempty"`              // 关卡怪物掉落
	AfterMonsterExist *bool          `protobuf:"varint,5,opt,name=afterMonsterExist" json:"afterMonsterExist,omitempty"` // 是否触发战后意外奖励
	AfterMonsterdrop  *MonsterDrop   `protobuf:"bytes,6,opt,name=afterMonsterdrop" json:"afterMonsterdrop,omitempty"`    // 战后意外奖励怪物掉落
}

func (x *StageDrop) Reset() {
	*x = StageDrop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_business_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageDrop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageDrop) ProtoMessage() {}

func (x *StageDrop) ProtoReflect() protoreflect.Message {
	mi := &file_business_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageDrop.ProtoReflect.Descriptor instead.
func (*StageDrop) Descriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{9}
}

func (x *StageDrop) GetStageId() string {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return ""
}

func (x *StageDrop) GetStageMoney() int32 {
	if x != nil && x.StageMoney != nil {
		return *x.StageMoney
	}
	return 0
}

func (x *StageDrop) GetStageExperience() int32 {
	if x != nil && x.StageExperience != nil {
		return *x.StageExperience
	}
	return 0
}

func (x *StageDrop) GetMonsterdrop() []*MonsterDrop {
	if x != nil {
		return x.Monsterdrop
	}
	return nil
}

func (x *StageDrop) GetAfterMonsterExist() bool {
	if x != nil && x.AfterMonsterExist != nil {
		return *x.AfterMonsterExist
	}
	return false
}

func (x *StageDrop) GetAfterMonsterdrop() *MonsterDrop {
	if x != nil {
		return x.AfterMonsterdrop
	}
	return nil
}

// 获取玩家挂机道具奖励
type AfkProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Props []*Prop `protobuf:"bytes,1,rep,name=props" json:"props,omitempty"`
}

func (x *AfkProps) Reset() {
	*x = AfkProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_business_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AfkProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AfkProps) ProtoMessage() {}

func (x *AfkProps) ProtoReflect() protoreflect.Message {
	mi := &file_business_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AfkProps.ProtoReflect.Descriptor instead.
func (*AfkProps) Descriptor() ([]byte, []int) {
	return file_business_proto_rawDescGZIP(), []int{10}
}

func (x *AfkProps) GetProps() []*Prop {
	if x != nil {
		return x.Props
	}
	return nil
}

var File_business_proto protoreflect.FileDescriptor

var file_business_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x2c, 0x0a, 0x04, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92,
	0x02, 0x0a, 0x04, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x65, 0x6c, 0x6d, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x65, 0x6c, 0x6d, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x72, 0x65, 0x61, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x72, 0x65, 0x61, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x68, 0x6f, 0x65, 0x73, 0x49, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x68, 0x6f, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x50, 0x61, 0x73,
	0x73, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x73, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x68, 0x65, 0x72, 0x6f, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x05, 0x68,
	0x65, 0x72, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x64, 0x64, 0x6f, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x75, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x75, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x75, 0x69, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x75, 0x69, 0x64, 0x65, 0x22, 0x3c,
	0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x5a, 0x0a, 0x08,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x39, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x69, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf0,
	0x01, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x63, 0x76, 0x57, 0x61,
	0x69, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x63, 0x76, 0x57, 0x61, 0x69, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x46, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x22, 0x87, 0x02, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x0b,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x10, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x44, 0x72, 0x6f,
	0x70, 0x52, 0x10, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x64,
	0x72, 0x6f, 0x70, 0x22, 0x27, 0x0a, 0x08, 0x41, 0x66, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x1b, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x2a, 0x81, 0x03, 0x0a,
	0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x54, 0x54, 0x65, 0x73, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x41, 0x75, 0x74,
	0x68, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x50, 0x75, 0x73, 0x68, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x48, 0x65, 0x72, 0x6f, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x54, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x54, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x52, 0x61, 0x6e,
	0x6b, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x54, 0x57, 0x61, 0x72, 0x65, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x08,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x43, 0x68, 0x61, 0x74, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x54, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x54, 0x53, 0x68, 0x61, 0x72, 0x65, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x54, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x54, 0x61, 0x73, 0x6b, 0x10,
	0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x54, 0x47, 0x41, 0x75, 0x74, 0x68, 0x10, 0x64, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x54, 0x47, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x54, 0x47, 0x4d, 0x61, 0x69, 0x6c, 0x10, 0x66, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x54,
	0x47, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x10, 0x67, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x54, 0x47,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x10, 0x68, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x54, 0x47, 0x46, 0x72,
	0x65, 0x65, 0x63, 0x61, 0x10, 0x69, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x54, 0x47, 0x46, 0x75, 0x62,
	0x65, 0x6e, 0x10, 0x6a, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x54, 0x47, 0x41, 0x72, 0x65, 0x61, 0x6e,
	0x10, 0x6b, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x54, 0x47, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x10, 0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x54, 0x47, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x10, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x54, 0x47, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x10, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x47, 0x56, 0x69, 0x70, 0x10, 0x6f, 0x12,
	0x0f, 0x0a, 0x0b, 0x4d, 0x54, 0x47, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x70,
	0x2a, 0x2b, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x54, 0x57, 0x69, 0x6e, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x52, 0x54, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x42, 0x07, 0x5a,
	0x05, 0x2e, 0x2e, 0x2f, 0x70, 0x62,
}

var (
	file_business_proto_rawDescOnce sync.Once
	file_business_proto_rawDescData = file_business_proto_rawDesc
)

func file_business_proto_rawDescGZIP() []byte {
	file_business_proto_rawDescOnce.Do(func() {
		file_business_proto_rawDescData = protoimpl.X.CompressGZIP(file_business_proto_rawDescData)
	})
	return file_business_proto_rawDescData
}

var file_business_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_business_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_business_proto_goTypes = []interface{}{
	(ModuleType)(0),              // 0: ModuleType
	(BattleResultType)(0),        // 1: BattleResultType
	(*Prop)(nil),                 // 2: Prop
	(*Hero)(nil),                 // 3: Hero
	(*LoginRsp)(nil),             // 4: LoginRsp
	(*Route)(nil),                // 5: Route
	(*Schedule)(nil),             // 6: Schedule
	(*BattleResult)(nil),         // 7: BattleResult
	(*UploadBattleProgress)(nil), // 8: UploadBattleProgress
	(*BattleInterface)(nil),      // 9: BattleInterface
	(*MonsterDrop)(nil),          // 10: MonsterDrop
	(*StageDrop)(nil),            // 11: StageDrop
	(*AfkProps)(nil),             // 12: AfkProps
}
var file_business_proto_depIdxs = []int32{
	2,  // 0: LoginRsp.props:type_name -> Prop
	3,  // 1: LoginRsp.heros:type_name -> Hero
	0,  // 2: Route.type:type_name -> ModuleType
	5,  // 3: Schedule.routes:type_name -> Route
	1,  // 4: BattleResult.result:type_name -> BattleResultType
	7,  // 5: UploadBattleProgress.battleResult:type_name -> BattleResult
	2,  // 6: BattleInterface.prop:type_name -> Prop
	2,  // 7: MonsterDrop.prop:type_name -> Prop
	10, // 8: StageDrop.monsterdrop:type_name -> MonsterDrop
	10, // 9: StageDrop.afterMonsterdrop:type_name -> MonsterDrop
	2,  // 10: AfkProps.props:type_name -> Prop
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_business_proto_init() }
func file_business_proto_init() {
	if File_business_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_business_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_business_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_business_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_business_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_business_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_business_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_business_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadBattleProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_business_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_business_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonsterDrop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_business_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageDrop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_business_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AfkProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_business_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_business_proto_goTypes,
		DependencyIndexes: file_business_proto_depIdxs,
		EnumInfos:         file_business_proto_enumTypes,
		MessageInfos:      file_business_proto_msgTypes,
	}.Build()
	File_business_proto = out.File
	file_business_proto_rawDesc = nil
	file_business_proto_goTypes = nil
	file_business_proto_depIdxs = nil
}

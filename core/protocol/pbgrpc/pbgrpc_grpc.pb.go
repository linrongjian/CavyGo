// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pbgrpc.proto

package pbgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PbGameRPCClient is the client API for PbGameRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PbGameRPCClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (PbGameRPC_StreamClient, error)
}

type pbGameRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewPbGameRPCClient(cc grpc.ClientConnInterface) PbGameRPCClient {
	return &pbGameRPCClient{cc}
}

func (c *pbGameRPCClient) Stream(ctx context.Context, opts ...grpc.CallOption) (PbGameRPC_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PbGameRPC_ServiceDesc.Streams[0], "/pbgrpc.PbGameRPC/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pbGameRPCStreamClient{stream}
	return x, nil
}

type PbGameRPC_StreamClient interface {
	Send(*PbGMessage) error
	Recv() (*PbGMessage, error)
	grpc.ClientStream
}

type pbGameRPCStreamClient struct {
	grpc.ClientStream
}

func (x *pbGameRPCStreamClient) Send(m *PbGMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pbGameRPCStreamClient) Recv() (*PbGMessage, error) {
	m := new(PbGMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PbGameRPCServer is the server API for PbGameRPC service.
// All implementations should embed UnimplementedPbGameRPCServer
// for forward compatibility
type PbGameRPCServer interface {
	Stream(PbGameRPC_StreamServer) error
}

// UnimplementedPbGameRPCServer should be embedded to have forward compatible implementations.
type UnimplementedPbGameRPCServer struct {
}

func (UnimplementedPbGameRPCServer) Stream(PbGameRPC_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

// UnsafePbGameRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PbGameRPCServer will
// result in compilation errors.
type UnsafePbGameRPCServer interface {
	mustEmbedUnimplementedPbGameRPCServer()
}

func RegisterPbGameRPCServer(s grpc.ServiceRegistrar, srv PbGameRPCServer) {
	s.RegisterService(&PbGameRPC_ServiceDesc, srv)
}

func _PbGameRPC_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PbGameRPCServer).Stream(&pbGameRPCStreamServer{stream})
}

type PbGameRPC_StreamServer interface {
	Send(*PbGMessage) error
	Recv() (*PbGMessage, error)
	grpc.ServerStream
}

type pbGameRPCStreamServer struct {
	grpc.ServerStream
}

func (x *pbGameRPCStreamServer) Send(m *PbGMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pbGameRPCStreamServer) Recv() (*PbGMessage, error) {
	m := new(PbGMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PbGameRPC_ServiceDesc is the grpc.ServiceDesc for PbGameRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PbGameRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbgrpc.PbGameRPC",
	HandlerType: (*PbGameRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _PbGameRPC_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pbgrpc.proto",
}
